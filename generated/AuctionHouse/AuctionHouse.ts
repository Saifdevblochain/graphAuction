// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionBid extends ethereum.Event {
  get params(): AuctionBid__Params {
    return new AuctionBid__Params(this);
  }
}

export class AuctionBid__Params {
  _event: AuctionBid;

  constructor(event: AuctionBid) {
    this._event = event;
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountTomi(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class AuctionBidLimitUpdated extends ethereum.Event {
  get params(): AuctionBidLimitUpdated__Params {
    return new AuctionBidLimitUpdated__Params(this);
  }
}

export class AuctionBidLimitUpdated__Params {
  _event: AuctionBidLimitUpdated;

  constructor(event: AuctionBidLimitUpdated) {
    this._event = event;
  }

  get bidLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionCancelBid extends ethereum.Event {
  get params(): AuctionCancelBid__Params {
    return new AuctionCancelBid__Params(this);
  }
}

export class AuctionCancelBid__Params {
  _event: AuctionCancelBid;

  constructor(event: AuctionCancelBid) {
    this._event = event;
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AuctionClaim extends ethereum.Event {
  get params(): AuctionClaim__Params {
    return new AuctionClaim__Params(this);
  }
}

export class AuctionClaim__Params {
  _event: AuctionClaim;

  constructor(event: AuctionClaim) {
    this._event = event;
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionDurationUpdated extends ethereum.Event {
  get params(): AuctionDurationUpdated__Params {
    return new AuctionDurationUpdated__Params(this);
  }
}

export class AuctionDurationUpdated__Params {
  _event: AuctionDurationUpdated;

  constructor(event: AuctionDurationUpdated) {
    this._event = event;
  }

  get duration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionFundsWalletUpdated extends ethereum.Event {
  get params(): AuctionFundsWalletUpdated__Params {
    return new AuctionFundsWalletUpdated__Params(this);
  }
}

export class AuctionFundsWalletUpdated__Params {
  _event: AuctionFundsWalletUpdated;

  constructor(event: AuctionFundsWalletUpdated) {
    this._event = event;
  }

  get funds(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AuctionSettled extends ethereum.Event {
  get params(): AuctionSettled__Params {
    return new AuctionSettled__Params(this);
  }
}

export class AuctionSettled__Params {
  _event: AuctionSettled;

  constructor(event: AuctionSettled) {
    this._event = event;
  }

  get auctionIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionTeamWalletUpdated extends ethereum.Event {
  get params(): AuctionTeamWalletUpdated__Params {
    return new AuctionTeamWalletUpdated__Params(this);
  }
}

export class AuctionTeamWalletUpdated__Params {
  _event: AuctionTeamWalletUpdated;

  constructor(event: AuctionTeamWalletUpdated) {
    this._event = event;
  }

  get team(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuctionHouse__getAuctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getAuctionIndex(): BigInt {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getDuration(): BigInt {
    return this.value3;
  }

  getBidLimit(): BigInt {
    return this.value4;
  }

  getBidCount(): BigInt {
    return this.value5;
  }
}

export class AuctionHouse__getBidsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getBidIndex(): BigInt {
    return this.value0;
  }

  getBidder(): Address {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getAmountTomi(): BigInt {
    return this.value3;
  }

  getStatus(): boolean {
    return this.value4;
  }

  getIsClaimed(): boolean {
    return this.value5;
  }

  getTokenType(): i32 {
    return this.value6;
  }
}

export class AuctionHouse__getUserBidsResultUserBidsStruct extends ethereum.Tuple {
  get bidIndex(): BigInt {
    return this[0].toBigInt();
  }

  get bidder(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get amountTomi(): BigInt {
    return this[3].toBigInt();
  }

  get status(): boolean {
    return this[4].toBoolean();
  }

  get isClaimed(): boolean {
    return this[5].toBoolean();
  }

  get tokenType(): i32 {
    return this[6].toI32();
  }
}

export class AuctionHouse__getUserBidsResult {
  value0: Array<BigInt>;
  value1: Array<AuctionHouse__getUserBidsResultUserBidsStruct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<AuctionHouse__getUserBidsResultUserBidsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getAuctionIndexes(): Array<BigInt> {
    return this.value0;
  }

  getUserBids(): Array<AuctionHouse__getUserBidsResultUserBidsStruct> {
    return this.value1;
  }
}

export class AuctionHouse extends ethereum.SmartContract {
  static bind(address: Address): AuctionHouse {
    return new AuctionHouse("AuctionHouse", address);
  }

  DAO(): Address {
    let result = super.call("DAO", "DAO():(address)", []);

    return result[0].toAddress();
  }

  try_DAO(): ethereum.CallResult<Address> {
    let result = super.tryCall("DAO", "DAO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FUNDS(): Address {
    let result = super.call("FUNDS", "FUNDS():(address)", []);

    return result[0].toAddress();
  }

  try_FUNDS(): ethereum.CallResult<Address> {
    let result = super.tryCall("FUNDS", "FUNDS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TEAM(): Address {
    let result = super.call("TEAM", "TEAM():(address)", []);

    return result[0].toAddress();
  }

  try_TEAM(): ethereum.CallResult<Address> {
    let result = super.tryCall("TEAM", "TEAM():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOMI(): Address {
    let result = super.call("TOMI", "TOMI():(address)", []);

    return result[0].toAddress();
  }

  try_TOMI(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOMI", "TOMI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionCount(): BigInt {
    let result = super.call("auctionCount", "auctionCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("auctionCount", "auctionCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidLimit(): BigInt {
    let result = super.call("bidLimit", "bidLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidLimit", "bidLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddingTokens(param0: BigInt): Address {
    let result = super.call(
      "biddingTokens",
      "biddingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_biddingTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "biddingTokens",
      "biddingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  duration(): BigInt {
    let result = super.call("duration", "duration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_duration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("duration", "duration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctions(param0: BigInt): AuctionHouse__getAuctionsResult {
    let result = super.call(
      "getAuctions",
      "getAuctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AuctionHouse__getAuctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getAuctions(
    param0: BigInt
  ): ethereum.CallResult<AuctionHouse__getAuctionsResult> {
    let result = super.tryCall(
      "getAuctions",
      "getAuctions(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionHouse__getAuctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getBidStatuses(
    auctionIndexes: Array<BigInt>,
    bidIndexes: Array<BigInt>,
    merkleProofs: Array<Array<Bytes>>
  ): Array<i32> {
    let result = super.call(
      "getBidStatuses",
      "getBidStatuses(uint256[],uint256[],bytes32[][]):(uint8[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(auctionIndexes),
        ethereum.Value.fromUnsignedBigIntArray(bidIndexes),
        ethereum.Value.fromFixedBytesMatrix(merkleProofs)
      ]
    );

    return result[0].toI32Array();
  }

  try_getBidStatuses(
    auctionIndexes: Array<BigInt>,
    bidIndexes: Array<BigInt>,
    merkleProofs: Array<Array<Bytes>>
  ): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getBidStatuses",
      "getBidStatuses(uint256[],uint256[],bytes32[][]):(uint8[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(auctionIndexes),
        ethereum.Value.fromUnsignedBigIntArray(bidIndexes),
        ethereum.Value.fromFixedBytesMatrix(merkleProofs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getBids(param0: BigInt, param1: BigInt): AuctionHouse__getBidsResult {
    let result = super.call(
      "getBids",
      "getBids(uint256,uint256):(uint256,address,uint256,uint256,bool,bool,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new AuctionHouse__getBidsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean(),
      result[6].toI32()
    );
  }

  try_getBids(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<AuctionHouse__getBidsResult> {
    let result = super.tryCall(
      "getBids",
      "getBids(uint256,uint256):(uint256,address,uint256,uint256,bool,bool,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionHouse__getBidsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean(),
        value[6].toI32()
      )
    );
  }

  getHighestBid(auctionIndex: BigInt): BigInt {
    let result = super.call(
      "getHighestBid",
      "getHighestBid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionIndex)]
    );

    return result[0].toBigInt();
  }

  try_getHighestBid(auctionIndex: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHighestBid",
      "getHighestBid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBids(bidder: Address): AuctionHouse__getUserBidsResult {
    let result = super.call(
      "getUserBids",
      "getUserBids(address):(uint256[],(uint256,address,uint256,uint256,bool,bool,uint8)[])",
      [ethereum.Value.fromAddress(bidder)]
    );

    return new AuctionHouse__getUserBidsResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<AuctionHouse__getUserBidsResultUserBidsStruct>()
    );
  }

  try_getUserBids(
    bidder: Address
  ): ethereum.CallResult<AuctionHouse__getUserBidsResult> {
    let result = super.tryCall(
      "getUserBids",
      "getUserBids(address):(uint256[],(uint256,address,uint256,uint256,bool,bool,uint8)[])",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctionHouse__getUserBidsResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<AuctionHouse__getUserBidsResultUserBidsStruct>()
      )
    );
  }

  getWins(param0: BigInt): Bytes {
    let result = super.call("getWins", "getWins(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_getWins(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getWins", "getWins(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get bidIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get auctionIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CreateBidCall extends ethereum.Call {
  get inputs(): CreateBidCall__Inputs {
    return new CreateBidCall__Inputs(this);
  }

  get outputs(): CreateBidCall__Outputs {
    return new CreateBidCall__Outputs(this);
  }
}

export class CreateBidCall__Inputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountTomi(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateBidCall__Outputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tomi_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get funds_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dao_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get team_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBidLimitCall extends ethereum.Call {
  get inputs(): SetBidLimitCall__Inputs {
    return new SetBidLimitCall__Inputs(this);
  }

  get outputs(): SetBidLimitCall__Outputs {
    return new SetBidLimitCall__Outputs(this);
  }
}

export class SetBidLimitCall__Inputs {
  _call: SetBidLimitCall;

  constructor(call: SetBidLimitCall) {
    this._call = call;
  }

  get bidLimit_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBidLimitCall__Outputs {
  _call: SetBidLimitCall;

  constructor(call: SetBidLimitCall) {
    this._call = call;
  }
}

export class SetDurationCall extends ethereum.Call {
  get inputs(): SetDurationCall__Inputs {
    return new SetDurationCall__Inputs(this);
  }

  get outputs(): SetDurationCall__Outputs {
    return new SetDurationCall__Outputs(this);
  }
}

export class SetDurationCall__Inputs {
  _call: SetDurationCall;

  constructor(call: SetDurationCall) {
    this._call = call;
  }

  get duration_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDurationCall__Outputs {
  _call: SetDurationCall;

  constructor(call: SetDurationCall) {
    this._call = call;
  }
}

export class SetFundsWalletCall extends ethereum.Call {
  get inputs(): SetFundsWalletCall__Inputs {
    return new SetFundsWalletCall__Inputs(this);
  }

  get outputs(): SetFundsWalletCall__Outputs {
    return new SetFundsWalletCall__Outputs(this);
  }
}

export class SetFundsWalletCall__Inputs {
  _call: SetFundsWalletCall;

  constructor(call: SetFundsWalletCall) {
    this._call = call;
  }

  get funds_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFundsWalletCall__Outputs {
  _call: SetFundsWalletCall;

  constructor(call: SetFundsWalletCall) {
    this._call = call;
  }
}

export class SetTeamWalletCall extends ethereum.Call {
  get inputs(): SetTeamWalletCall__Inputs {
    return new SetTeamWalletCall__Inputs(this);
  }

  get outputs(): SetTeamWalletCall__Outputs {
    return new SetTeamWalletCall__Outputs(this);
  }
}

export class SetTeamWalletCall__Inputs {
  _call: SetTeamWalletCall;

  constructor(call: SetTeamWalletCall) {
    this._call = call;
  }

  get team_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTeamWalletCall__Outputs {
  _call: SetTeamWalletCall;

  constructor(call: SetTeamWalletCall) {
    this._call = call;
  }
}

export class SettleAndCreateAuctionCall extends ethereum.Call {
  get inputs(): SettleAndCreateAuctionCall__Inputs {
    return new SettleAndCreateAuctionCall__Inputs(this);
  }

  get outputs(): SettleAndCreateAuctionCall__Outputs {
    return new SettleAndCreateAuctionCall__Outputs(this);
  }
}

export class SettleAndCreateAuctionCall__Inputs {
  _call: SettleAndCreateAuctionCall;

  constructor(call: SettleAndCreateAuctionCall) {
    this._call = call;
  }

  get root(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SettleAndCreateAuctionCall__Outputs {
  _call: SettleAndCreateAuctionCall;

  constructor(call: SettleAndCreateAuctionCall) {
    this._call = call;
  }
}

export class Test_durationCall extends ethereum.Call {
  get inputs(): Test_durationCall__Inputs {
    return new Test_durationCall__Inputs(this);
  }

  get outputs(): Test_durationCall__Outputs {
    return new Test_durationCall__Outputs(this);
  }
}

export class Test_durationCall__Inputs {
  _call: Test_durationCall;

  constructor(call: Test_durationCall) {
    this._call = call;
  }

  get duration_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Test_durationCall__Outputs {
  _call: Test_durationCall;

  constructor(call: Test_durationCall) {
    this._call = call;
  }
}

export class Test_tomiCall extends ethereum.Call {
  get inputs(): Test_tomiCall__Inputs {
    return new Test_tomiCall__Inputs(this);
  }

  get outputs(): Test_tomiCall__Outputs {
    return new Test_tomiCall__Outputs(this);
  }
}

export class Test_tomiCall__Inputs {
  _call: Test_tomiCall;

  constructor(call: Test_tomiCall) {
    this._call = call;
  }

  get tomi_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Test_tomiCall__Outputs {
  _call: Test_tomiCall;

  constructor(call: Test_tomiCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
